// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.19.1
// source: protos/event.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal.js";
import { Timestamp } from "../google/protobuf/timestamp.js";

export const protobufPackage = "event_proto";

export enum EventType {
  REGISTER = 0,
  FRIEND_APPLY = 1,
  GROUP_APPLY = 2,
  UNRECOGNIZED = -1,
}

export function eventTypeFromJSON(object: any): EventType {
  switch (object) {
    case 0:
    case "REGISTER":
      return EventType.REGISTER;
    case 1:
    case "FRIEND_APPLY":
      return EventType.FRIEND_APPLY;
    case 2:
    case "GROUP_APPLY":
      return EventType.GROUP_APPLY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EventType.UNRECOGNIZED;
  }
}

export function eventTypeToJSON(object: EventType): string {
  switch (object) {
    case EventType.REGISTER:
      return "REGISTER";
    case EventType.FRIEND_APPLY:
      return "FRIEND_APPLY";
    case EventType.GROUP_APPLY:
      return "GROUP_APPLY";
    case EventType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BroadcastRequest {
  type: EventType;
  data: string;
}

export interface Event {
  id: bigint;
  type: EventType;
  data: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  deletedAt: Date | undefined;
}

function createBaseBroadcastRequest(): BroadcastRequest {
  return { type: 0, data: "" };
}

export const BroadcastRequest = {
  encode(message: BroadcastRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.data !== "") {
      writer.uint32(18).string(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BroadcastRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBroadcastRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BroadcastRequest {
    return {
      type: isSet(object.type) ? eventTypeFromJSON(object.type) : 0,
      data: isSet(object.data) ? globalThis.String(object.data) : "",
    };
  },

  toJSON(message: BroadcastRequest): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = eventTypeToJSON(message.type);
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BroadcastRequest>, I>>(base?: I): BroadcastRequest {
    return BroadcastRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BroadcastRequest>, I>>(object: I): BroadcastRequest {
    const message = createBaseBroadcastRequest();
    message.type = object.type ?? 0;
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseEvent(): Event {
  return { id: 0n, type: 0, data: "", createdAt: undefined, updatedAt: undefined, deletedAt: undefined };
}

export const Event = {
  encode(message: Event, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0n) {
      if (BigInt.asIntN(64, message.id) !== message.id) {
        throw new globalThis.Error("value provided for field message.id of type int64 too large");
      }
      writer.uint32(8).int64(message.id.toString());
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.data !== "") {
      writer.uint32(26).string(message.data);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(34).fork()).ldelim();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(42).fork()).ldelim();
    }
    if (message.deletedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.deletedAt), writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Event {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToBigint(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.data = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.deletedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      id: isSet(object.id) ? BigInt(object.id) : 0n,
      type: isSet(object.type) ? eventTypeFromJSON(object.type) : 0,
      data: isSet(object.data) ? globalThis.String(object.data) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.id !== 0n) {
      obj.id = message.id.toString();
    }
    if (message.type !== 0) {
      obj.type = eventTypeToJSON(message.type);
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.deletedAt !== undefined) {
      obj.deletedAt = message.deletedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event>, I>>(base?: I): Event {
    return Event.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event>, I>>(object: I): Event {
    const message = createBaseEvent();
    message.id = object.id ?? 0n;
    message.type = object.type ?? 0;
    message.data = object.data ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.deletedAt = object.deletedAt ?? undefined;
    return message;
  },
};

export type EventProtoService = typeof EventProtoService;
export const EventProtoService = {
  broadcast: {
    path: "/event_proto.EventProto/Broadcast",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: BroadcastRequest) => Buffer.from(BroadcastRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => BroadcastRequest.decode(value),
    responseSerialize: (value: Event) => Buffer.from(Event.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Event.decode(value),
  },
} as const;

export interface EventProtoServer extends UntypedServiceImplementation {
  broadcast: handleUnaryCall<BroadcastRequest, Event>;
}

export interface EventProtoClient extends Client {
  broadcast(
    request: BroadcastRequest,
    callback: (error: ServiceError | null, response: Event) => void,
  ): ClientUnaryCall;
  broadcast(
    request: BroadcastRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Event) => void,
  ): ClientUnaryCall;
  broadcast(
    request: BroadcastRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Event) => void,
  ): ClientUnaryCall;
}

export const EventProtoClient = makeGenericClientConstructor(
  EventProtoService,
  "event_proto.EventProto",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): EventProtoClient;
  service: typeof EventProtoService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = BigInt(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds.toString()) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToBigint(long: Long) {
  return BigInt(long.toString());
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
