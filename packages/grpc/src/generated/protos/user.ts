// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.19.1
// source: protos/user.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal.js";

export const protobufPackage = "user_proto";

export interface FindUsersByAddrsRequest {
  addrs: string[];
}

export interface FindUsersByIdsRequest {
  ids: bigint[];
}

export interface UserListResponse {
  users: User[];
}

export interface User {
  id: bigint;
  userName: string;
  nickName: string;
  avatar: string;
  addr: string;
  gender: number;
  status: number;
  pubKey: string;
  createdAt: bigint;
  updatedAt: bigint;
  deletedAt: bigint;
  sign: string;
}

function createBaseFindUsersByAddrsRequest(): FindUsersByAddrsRequest {
  return { addrs: [] };
}

export const FindUsersByAddrsRequest = {
  encode(message: FindUsersByAddrsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.addrs) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FindUsersByAddrsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUsersByAddrsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.addrs.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUsersByAddrsRequest {
    return { addrs: globalThis.Array.isArray(object?.addrs) ? object.addrs.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: FindUsersByAddrsRequest): unknown {
    const obj: any = {};
    if (message.addrs?.length) {
      obj.addrs = message.addrs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUsersByAddrsRequest>, I>>(base?: I): FindUsersByAddrsRequest {
    return FindUsersByAddrsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUsersByAddrsRequest>, I>>(object: I): FindUsersByAddrsRequest {
    const message = createBaseFindUsersByAddrsRequest();
    message.addrs = object.addrs?.map((e) => e) || [];
    return message;
  },
};

function createBaseFindUsersByIdsRequest(): FindUsersByIdsRequest {
  return { ids: [] };
}

export const FindUsersByIdsRequest = {
  encode(message: FindUsersByIdsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      if (BigInt.asUintN(64, v) !== v) {
        throw new globalThis.Error("a value provided in array field ids of type uint64 is too large");
      }
      writer.uint64(v.toString());
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FindUsersByIdsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUsersByIdsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.ids.push(longToBigint(reader.uint64() as Long));

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(longToBigint(reader.uint64() as Long));
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUsersByIdsRequest {
    return { ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => BigInt(e)) : [] };
  },

  toJSON(message: FindUsersByIdsRequest): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids.map((e) => e.toString());
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUsersByIdsRequest>, I>>(base?: I): FindUsersByIdsRequest {
    return FindUsersByIdsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUsersByIdsRequest>, I>>(object: I): FindUsersByIdsRequest {
    const message = createBaseFindUsersByIdsRequest();
    message.ids = object.ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseUserListResponse(): UserListResponse {
  return { users: [] };
}

export const UserListResponse = {
  encode(message: UserListResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.users) {
      User.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserListResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.users.push(User.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserListResponse {
    return { users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => User.fromJSON(e)) : [] };
  },

  toJSON(message: UserListResponse): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => User.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserListResponse>, I>>(base?: I): UserListResponse {
    return UserListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserListResponse>, I>>(object: I): UserListResponse {
    const message = createBaseUserListResponse();
    message.users = object.users?.map((e) => User.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUser(): User {
  return {
    id: 0n,
    userName: "",
    nickName: "",
    avatar: "",
    addr: "",
    gender: 0,
    status: 0,
    pubKey: "",
    createdAt: 0n,
    updatedAt: 0n,
    deletedAt: 0n,
    sign: "",
  };
}

export const User = {
  encode(message: User, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0n) {
      if (BigInt.asUintN(64, message.id) !== message.id) {
        throw new globalThis.Error("value provided for field message.id of type uint64 too large");
      }
      writer.uint32(8).uint64(message.id.toString());
    }
    if (message.userName !== "") {
      writer.uint32(18).string(message.userName);
    }
    if (message.nickName !== "") {
      writer.uint32(26).string(message.nickName);
    }
    if (message.avatar !== "") {
      writer.uint32(34).string(message.avatar);
    }
    if (message.addr !== "") {
      writer.uint32(42).string(message.addr);
    }
    if (message.gender !== 0) {
      writer.uint32(48).int32(message.gender);
    }
    if (message.status !== 0) {
      writer.uint32(56).int32(message.status);
    }
    if (message.pubKey !== "") {
      writer.uint32(66).string(message.pubKey);
    }
    if (message.createdAt !== 0n) {
      if (BigInt.asUintN(64, message.createdAt) !== message.createdAt) {
        throw new globalThis.Error("value provided for field message.createdAt of type uint64 too large");
      }
      writer.uint32(72).uint64(message.createdAt.toString());
    }
    if (message.updatedAt !== 0n) {
      if (BigInt.asUintN(64, message.updatedAt) !== message.updatedAt) {
        throw new globalThis.Error("value provided for field message.updatedAt of type uint64 too large");
      }
      writer.uint32(80).uint64(message.updatedAt.toString());
    }
    if (message.deletedAt !== 0n) {
      if (BigInt.asUintN(64, message.deletedAt) !== message.deletedAt) {
        throw new globalThis.Error("value provided for field message.deletedAt of type uint64 too large");
      }
      writer.uint32(88).uint64(message.deletedAt.toString());
    }
    if (message.sign !== "") {
      writer.uint32(98).string(message.sign);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): User {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToBigint(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nickName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.avatar = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.addr = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.gender = reader.int32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.status = reader.int32();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.pubKey = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.createdAt = longToBigint(reader.uint64() as Long);
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.updatedAt = longToBigint(reader.uint64() as Long);
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.deletedAt = longToBigint(reader.uint64() as Long);
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.sign = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      id: isSet(object.id) ? BigInt(object.id) : 0n,
      userName: isSet(object.userName) ? globalThis.String(object.userName) : "",
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
      addr: isSet(object.addr) ? globalThis.String(object.addr) : "",
      gender: isSet(object.gender) ? globalThis.Number(object.gender) : 0,
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      pubKey: isSet(object.pubKey) ? globalThis.String(object.pubKey) : "",
      createdAt: isSet(object.createdAt) ? BigInt(object.createdAt) : 0n,
      updatedAt: isSet(object.updatedAt) ? BigInt(object.updatedAt) : 0n,
      deletedAt: isSet(object.deletedAt) ? BigInt(object.deletedAt) : 0n,
      sign: isSet(object.sign) ? globalThis.String(object.sign) : "",
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.id !== 0n) {
      obj.id = message.id.toString();
    }
    if (message.userName !== "") {
      obj.userName = message.userName;
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    if (message.addr !== "") {
      obj.addr = message.addr;
    }
    if (message.gender !== 0) {
      obj.gender = Math.round(message.gender);
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.pubKey !== "") {
      obj.pubKey = message.pubKey;
    }
    if (message.createdAt !== 0n) {
      obj.createdAt = message.createdAt.toString();
    }
    if (message.updatedAt !== 0n) {
      obj.updatedAt = message.updatedAt.toString();
    }
    if (message.deletedAt !== 0n) {
      obj.deletedAt = message.deletedAt.toString();
    }
    if (message.sign !== "") {
      obj.sign = message.sign;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.id = object.id ?? 0n;
    message.userName = object.userName ?? "";
    message.nickName = object.nickName ?? "";
    message.avatar = object.avatar ?? "";
    message.addr = object.addr ?? "";
    message.gender = object.gender ?? 0;
    message.status = object.status ?? 0;
    message.pubKey = object.pubKey ?? "";
    message.createdAt = object.createdAt ?? 0n;
    message.updatedAt = object.updatedAt ?? 0n;
    message.deletedAt = object.deletedAt ?? 0n;
    message.sign = object.sign ?? "";
    return message;
  },
};

export type UserProtoService = typeof UserProtoService;
export const UserProtoService = {
  findUsersByAddrs: {
    path: "/user_proto.UserProto/FindUsersByAddrs",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindUsersByAddrsRequest) => Buffer.from(FindUsersByAddrsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindUsersByAddrsRequest.decode(value),
    responseSerialize: (value: UserListResponse) => Buffer.from(UserListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UserListResponse.decode(value),
  },
  findUsersByIds: {
    path: "/user_proto.UserProto/FindUsersByIds",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindUsersByIdsRequest) => Buffer.from(FindUsersByIdsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindUsersByIdsRequest.decode(value),
    responseSerialize: (value: UserListResponse) => Buffer.from(UserListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UserListResponse.decode(value),
  },
} as const;

export interface UserProtoServer extends UntypedServiceImplementation {
  findUsersByAddrs: handleUnaryCall<FindUsersByAddrsRequest, UserListResponse>;
  findUsersByIds: handleUnaryCall<FindUsersByIdsRequest, UserListResponse>;
}

export interface UserProtoClient extends Client {
  findUsersByAddrs(
    request: FindUsersByAddrsRequest,
    callback: (error: ServiceError | null, response: UserListResponse) => void,
  ): ClientUnaryCall;
  findUsersByAddrs(
    request: FindUsersByAddrsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserListResponse) => void,
  ): ClientUnaryCall;
  findUsersByAddrs(
    request: FindUsersByAddrsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserListResponse) => void,
  ): ClientUnaryCall;
  findUsersByIds(
    request: FindUsersByIdsRequest,
    callback: (error: ServiceError | null, response: UserListResponse) => void,
  ): ClientUnaryCall;
  findUsersByIds(
    request: FindUsersByIdsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserListResponse) => void,
  ): ClientUnaryCall;
  findUsersByIds(
    request: FindUsersByIdsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserListResponse) => void,
  ): ClientUnaryCall;
}

export const UserProtoClient = makeGenericClientConstructor(UserProtoService, "user_proto.UserProto") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserProtoClient;
  service: typeof UserProtoService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToBigint(long: Long) {
  return BigInt(long.toString());
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
