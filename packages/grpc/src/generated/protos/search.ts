// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.19.1
// source: protos/search.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal.js";
import { BoolValue } from "../google/protobuf/wrappers.js";

export const protobufPackage = "search_proto";

export enum SearchResultTypeEnum {
  GROUP = 0,
  UNRECOGNIZED = -1,
}

export function searchResultTypeEnumFromJSON(object: any): SearchResultTypeEnum {
  switch (object) {
    case 0:
    case "GROUP":
      return SearchResultTypeEnum.GROUP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SearchResultTypeEnum.UNRECOGNIZED;
  }
}

export function searchResultTypeEnumToJSON(object: SearchResultTypeEnum): string {
  switch (object) {
    case SearchResultTypeEnum.GROUP:
      return "GROUP";
    case SearchResultTypeEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SearchIndexRequest {
  searchType: SearchResultTypeEnum;
  refId: string;
  indexValue: string;
  link: string;
  name: string;
}

export interface DropIndexRequest {
  searchType: SearchResultTypeEnum;
  refIds: string[];
}

function createBaseSearchIndexRequest(): SearchIndexRequest {
  return { searchType: 0, refId: "", indexValue: "", link: "", name: "" };
}

export const SearchIndexRequest = {
  encode(message: SearchIndexRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.searchType !== 0) {
      writer.uint32(8).int32(message.searchType);
    }
    if (message.refId !== "") {
      writer.uint32(18).string(message.refId);
    }
    if (message.indexValue !== "") {
      writer.uint32(26).string(message.indexValue);
    }
    if (message.link !== "") {
      writer.uint32(34).string(message.link);
    }
    if (message.name !== "") {
      writer.uint32(42).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SearchIndexRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchIndexRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.searchType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.refId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.indexValue = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.link = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchIndexRequest {
    return {
      searchType: isSet(object.searchType) ? searchResultTypeEnumFromJSON(object.searchType) : 0,
      refId: isSet(object.refId) ? globalThis.String(object.refId) : "",
      indexValue: isSet(object.indexValue) ? globalThis.String(object.indexValue) : "",
      link: isSet(object.link) ? globalThis.String(object.link) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: SearchIndexRequest): unknown {
    const obj: any = {};
    if (message.searchType !== 0) {
      obj.searchType = searchResultTypeEnumToJSON(message.searchType);
    }
    if (message.refId !== "") {
      obj.refId = message.refId;
    }
    if (message.indexValue !== "") {
      obj.indexValue = message.indexValue;
    }
    if (message.link !== "") {
      obj.link = message.link;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchIndexRequest>, I>>(base?: I): SearchIndexRequest {
    return SearchIndexRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchIndexRequest>, I>>(object: I): SearchIndexRequest {
    const message = createBaseSearchIndexRequest();
    message.searchType = object.searchType ?? 0;
    message.refId = object.refId ?? "";
    message.indexValue = object.indexValue ?? "";
    message.link = object.link ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDropIndexRequest(): DropIndexRequest {
  return { searchType: 0, refIds: [] };
}

export const DropIndexRequest = {
  encode(message: DropIndexRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.searchType !== 0) {
      writer.uint32(8).int32(message.searchType);
    }
    for (const v of message.refIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DropIndexRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDropIndexRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.searchType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.refIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DropIndexRequest {
    return {
      searchType: isSet(object.searchType) ? searchResultTypeEnumFromJSON(object.searchType) : 0,
      refIds: globalThis.Array.isArray(object?.refIds) ? object.refIds.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: DropIndexRequest): unknown {
    const obj: any = {};
    if (message.searchType !== 0) {
      obj.searchType = searchResultTypeEnumToJSON(message.searchType);
    }
    if (message.refIds?.length) {
      obj.refIds = message.refIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DropIndexRequest>, I>>(base?: I): DropIndexRequest {
    return DropIndexRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DropIndexRequest>, I>>(object: I): DropIndexRequest {
    const message = createBaseDropIndexRequest();
    message.searchType = object.searchType ?? 0;
    message.refIds = object.refIds?.map((e) => e) || [];
    return message;
  },
};

export type SearchProtoService = typeof SearchProtoService;
export const SearchProtoService = {
  /** 新增索引/变更索引 */
  makeIndex: {
    path: "/search_proto.SearchProto/makeIndex",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SearchIndexRequest) => Buffer.from(SearchIndexRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SearchIndexRequest.decode(value),
    responseSerialize: (value: boolean | undefined) =>
      Buffer.from(BoolValue.encode({ value: value ?? false }).finish()),
    responseDeserialize: (value: Buffer) => BoolValue.decode(value).value,
  },
  /** 删除索引 */
  dropIndex: {
    path: "/search_proto.SearchProto/dropIndex",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DropIndexRequest) => Buffer.from(DropIndexRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DropIndexRequest.decode(value),
    responseSerialize: (value: boolean | undefined) =>
      Buffer.from(BoolValue.encode({ value: value ?? false }).finish()),
    responseDeserialize: (value: Buffer) => BoolValue.decode(value).value,
  },
} as const;

export interface SearchProtoServer extends UntypedServiceImplementation {
  /** 新增索引/变更索引 */
  makeIndex: handleUnaryCall<SearchIndexRequest, boolean | undefined>;
  /** 删除索引 */
  dropIndex: handleUnaryCall<DropIndexRequest, boolean | undefined>;
}

export interface SearchProtoClient extends Client {
  /** 新增索引/变更索引 */
  makeIndex(
    request: SearchIndexRequest,
    callback: (error: ServiceError | null, response: boolean | undefined) => void,
  ): ClientUnaryCall;
  makeIndex(
    request: SearchIndexRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: boolean | undefined) => void,
  ): ClientUnaryCall;
  makeIndex(
    request: SearchIndexRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: boolean | undefined) => void,
  ): ClientUnaryCall;
  /** 删除索引 */
  dropIndex(
    request: DropIndexRequest,
    callback: (error: ServiceError | null, response: boolean | undefined) => void,
  ): ClientUnaryCall;
  dropIndex(
    request: DropIndexRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: boolean | undefined) => void,
  ): ClientUnaryCall;
  dropIndex(
    request: DropIndexRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: boolean | undefined) => void,
  ): ClientUnaryCall;
}

export const SearchProtoClient = makeGenericClientConstructor(
  SearchProtoService,
  "search_proto.SearchProto",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): SearchProtoClient;
  service: typeof SearchProtoService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
