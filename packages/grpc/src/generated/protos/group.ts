// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.19.1
// source: protos/group.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal.js";

export const protobufPackage = "group_proto";

export interface FindGroupsByIdsRequest {
  ids: bigint[];
}

export interface GroupListResponse {
  items: Group[];
}

export interface Group {
  id: bigint;
  name: string;
  avatar: string;
  memberLimit: number;
  total: number;
  ownerId: bigint;
  creatorId: bigint;
  createdAt: bigint;
  notice: string;
  desc: string;
  cover: string;
  type: number;
  status: number;
}

function createBaseFindGroupsByIdsRequest(): FindGroupsByIdsRequest {
  return { ids: [] };
}

export const FindGroupsByIdsRequest = {
  encode(message: FindGroupsByIdsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      if (BigInt.asUintN(64, v) !== v) {
        throw new globalThis.Error("a value provided in array field ids of type uint64 is too large");
      }
      writer.uint64(v.toString());
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FindGroupsByIdsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindGroupsByIdsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.ids.push(longToBigint(reader.uint64() as Long));

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(longToBigint(reader.uint64() as Long));
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindGroupsByIdsRequest {
    return { ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => BigInt(e)) : [] };
  },

  toJSON(message: FindGroupsByIdsRequest): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids.map((e) => e.toString());
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindGroupsByIdsRequest>, I>>(base?: I): FindGroupsByIdsRequest {
    return FindGroupsByIdsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindGroupsByIdsRequest>, I>>(object: I): FindGroupsByIdsRequest {
    const message = createBaseFindGroupsByIdsRequest();
    message.ids = object.ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseGroupListResponse(): GroupListResponse {
  return { items: [] };
}

export const GroupListResponse = {
  encode(message: GroupListResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.items) {
      Group.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GroupListResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.items.push(Group.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupListResponse {
    return { items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => Group.fromJSON(e)) : [] };
  },

  toJSON(message: GroupListResponse): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => Group.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GroupListResponse>, I>>(base?: I): GroupListResponse {
    return GroupListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GroupListResponse>, I>>(object: I): GroupListResponse {
    const message = createBaseGroupListResponse();
    message.items = object.items?.map((e) => Group.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGroup(): Group {
  return {
    id: 0n,
    name: "",
    avatar: "",
    memberLimit: 0,
    total: 0,
    ownerId: 0n,
    creatorId: 0n,
    createdAt: 0n,
    notice: "",
    desc: "",
    cover: "",
    type: 0,
    status: 0,
  };
}

export const Group = {
  encode(message: Group, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0n) {
      if (BigInt.asUintN(64, message.id) !== message.id) {
        throw new globalThis.Error("value provided for field message.id of type uint64 too large");
      }
      writer.uint32(8).uint64(message.id.toString());
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.avatar !== "") {
      writer.uint32(26).string(message.avatar);
    }
    if (message.memberLimit !== 0) {
      writer.uint32(32).int32(message.memberLimit);
    }
    if (message.total !== 0) {
      writer.uint32(40).int32(message.total);
    }
    if (message.ownerId !== 0n) {
      if (BigInt.asIntN(64, message.ownerId) !== message.ownerId) {
        throw new globalThis.Error("value provided for field message.ownerId of type int64 too large");
      }
      writer.uint32(48).int64(message.ownerId.toString());
    }
    if (message.creatorId !== 0n) {
      if (BigInt.asIntN(64, message.creatorId) !== message.creatorId) {
        throw new globalThis.Error("value provided for field message.creatorId of type int64 too large");
      }
      writer.uint32(56).int64(message.creatorId.toString());
    }
    if (message.createdAt !== 0n) {
      if (BigInt.asIntN(64, message.createdAt) !== message.createdAt) {
        throw new globalThis.Error("value provided for field message.createdAt of type int64 too large");
      }
      writer.uint32(64).int64(message.createdAt.toString());
    }
    if (message.notice !== "") {
      writer.uint32(74).string(message.notice);
    }
    if (message.desc !== "") {
      writer.uint32(82).string(message.desc);
    }
    if (message.cover !== "") {
      writer.uint32(90).string(message.cover);
    }
    if (message.type !== 0) {
      writer.uint32(96).int32(message.type);
    }
    if (message.status !== 0) {
      writer.uint32(104).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Group {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToBigint(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.avatar = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.memberLimit = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.total = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.ownerId = longToBigint(reader.int64() as Long);
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.creatorId = longToBigint(reader.int64() as Long);
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.createdAt = longToBigint(reader.int64() as Long);
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.notice = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.desc = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.cover = reader.string();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.type = reader.int32();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.status = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Group {
    return {
      id: isSet(object.id) ? BigInt(object.id) : 0n,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
      memberLimit: isSet(object.memberLimit) ? globalThis.Number(object.memberLimit) : 0,
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      ownerId: isSet(object.ownerId) ? BigInt(object.ownerId) : 0n,
      creatorId: isSet(object.creatorId) ? BigInt(object.creatorId) : 0n,
      createdAt: isSet(object.createdAt) ? BigInt(object.createdAt) : 0n,
      notice: isSet(object.notice) ? globalThis.String(object.notice) : "",
      desc: isSet(object.desc) ? globalThis.String(object.desc) : "",
      cover: isSet(object.cover) ? globalThis.String(object.cover) : "",
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
    };
  },

  toJSON(message: Group): unknown {
    const obj: any = {};
    if (message.id !== 0n) {
      obj.id = message.id.toString();
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    if (message.memberLimit !== 0) {
      obj.memberLimit = Math.round(message.memberLimit);
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.ownerId !== 0n) {
      obj.ownerId = message.ownerId.toString();
    }
    if (message.creatorId !== 0n) {
      obj.creatorId = message.creatorId.toString();
    }
    if (message.createdAt !== 0n) {
      obj.createdAt = message.createdAt.toString();
    }
    if (message.notice !== "") {
      obj.notice = message.notice;
    }
    if (message.desc !== "") {
      obj.desc = message.desc;
    }
    if (message.cover !== "") {
      obj.cover = message.cover;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Group>, I>>(base?: I): Group {
    return Group.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Group>, I>>(object: I): Group {
    const message = createBaseGroup();
    message.id = object.id ?? 0n;
    message.name = object.name ?? "";
    message.avatar = object.avatar ?? "";
    message.memberLimit = object.memberLimit ?? 0;
    message.total = object.total ?? 0;
    message.ownerId = object.ownerId ?? 0n;
    message.creatorId = object.creatorId ?? 0n;
    message.createdAt = object.createdAt ?? 0n;
    message.notice = object.notice ?? "";
    message.desc = object.desc ?? "";
    message.cover = object.cover ?? "";
    message.type = object.type ?? 0;
    message.status = object.status ?? 0;
    return message;
  },
};

export type GroupProtoService = typeof GroupProtoService;
export const GroupProtoService = {
  findGroupByIds: {
    path: "/group_proto.GroupProto/FindGroupByIds",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindGroupsByIdsRequest) => Buffer.from(FindGroupsByIdsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindGroupsByIdsRequest.decode(value),
    responseSerialize: (value: GroupListResponse) => Buffer.from(GroupListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GroupListResponse.decode(value),
  },
} as const;

export interface GroupProtoServer extends UntypedServiceImplementation {
  findGroupByIds: handleUnaryCall<FindGroupsByIdsRequest, GroupListResponse>;
}

export interface GroupProtoClient extends Client {
  findGroupByIds(
    request: FindGroupsByIdsRequest,
    callback: (error: ServiceError | null, response: GroupListResponse) => void,
  ): ClientUnaryCall;
  findGroupByIds(
    request: FindGroupsByIdsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GroupListResponse) => void,
  ): ClientUnaryCall;
  findGroupByIds(
    request: FindGroupsByIdsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GroupListResponse) => void,
  ): ClientUnaryCall;
}

export const GroupProtoClient = makeGenericClientConstructor(
  GroupProtoService,
  "group_proto.GroupProto",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): GroupProtoClient;
  service: typeof GroupProtoService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToBigint(long: Long) {
  return BigInt(long.toString());
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
